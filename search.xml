<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java基础语法学习笔记</title>
    <url>/2020/04/26/java1/</url>
    <content><![CDATA[<img src="/2020/04/26/java1/1.png" alt="1" style="zoom: 150%;">

<p>图片来源：<a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a></p>
<p font-family="仿宋">java的基础语法需要掌握：java注释（Annotation）、标识符的定义规则、常量、整形常量（byte、short、int、long）、浮点数常量（float、double）、字符常量（char）、字符串常量（""）、布尔常量（boolean）、null常量。</p>

<a id="more"></a>

<p>基础语法没什么可以讲的，只不过需要注意一些要点就行。</p>
<blockquote>
<p>注释：单行注释:通常用于对程序中的某一行代码进行解释，用符号“//” 表示，“//”后面为被注释的内容。</p>
<p>多行注释:顾名思义就是在注释中的内容可以为多行，它以符号“/<em>”开头，以符号“</em>/” 结尾。</p>
<p>文档注释:以‘“/<em>*”开头，并在注释内容末尾以‘“</em>/‘”结束。</p>
</blockquote>
<h3 id="定义标识符需注意"><a href="#定义标识符需注意" class="headerlink" title="定义标识符需注意"></a>定义标识符需注意</h3><blockquote>
<p>1、包名所有字母一律小写。例如: cn.itcast.test.</p>
<p>2、类名和接口名每个单词的首字母都要大写。如: ArrayLlist、 Iterator。</p>
<p>3、常量名所有字母都大写，单词之间用下划线连接。例如:DAY_ OF_ _MONTH。</p>
<p>4、变量名和方法名的第一个单词首字母小写，从第二个单词开始每个单词首字母大写。例如: lineNumber、 getLineNumber.</p>
<p>5、在程序中，应该尽量使用有意义的英文单词来定义标识符，使得程序便于阅读。例如使用userName表示用户名，password表示密码。</p>
</blockquote>
<p>还有在创建package和class的时候不要使用关键字去进行创建，关键字就是java中的函数，比如int  long   double等都是关键字。</p>
<p>下面是常见的关键字</p>
<table>
<thead>
<tr>
<th align="center">abstract</th>
<th align="center"><p align="center">continus</p></th>
<th align="center">for</th>
<th align="center">new</th>
<th align="center">switch</th>
</tr>
</thead>
<tbody><tr>
<td align="center">assert</td>
<td align="center"><p align="center">default</p></td>
<td align="center">goto</td>
<td align="center">package</td>
<td align="center">synchronized</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center"><p align="center">do</p></td>
<td align="center">if</td>
<td align="center">private</td>
<td align="center">this</td>
</tr>
<tr>
<td align="center">break</td>
<td align="center"><p align="center">double</p></td>
<td align="center">implements</td>
<td align="center">protected</td>
<td align="center">throw</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center"><p align="center">else</p></td>
<td align="center">import</td>
<td align="center">public</td>
<td align="center">throws</td>
</tr>
<tr>
<td align="center">case</td>
<td align="center"><p align="center">enum</p></td>
<td align="center">insranceof</td>
<td align="center">return</td>
<td align="center">traneient</td>
</tr>
<tr>
<td align="center">catch</td>
<td align="center"><p align="center">extends</p></td>
<td align="center">int</td>
<td align="center">short</td>
<td align="center">try</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center"><p align="center">final</p></td>
<td align="center">interface</td>
<td align="center">static</td>
<td align="center">void</td>
</tr>
<tr>
<td align="center">class</td>
<td align="center"><p align="center">finally</p></td>
<td align="center">long</td>
<td align="center">strictfp</td>
<td align="center">volatile</td>
</tr>
<tr>
<td align="center">const</td>
<td align="center"><p align="center">float</p></td>
<td align="center">native</td>
<td align="center">super</td>
<td align="center">while</td>
</tr>
</tbody></table>
<p>博主表示Typora的居中对齐有bug，逼得博主直接align。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量就是在程序中固定不变的值，是不能改变的数据。在Java中，常量包括整型常量、浮点数常量、布尔常量、字符常量等。</p>
<h3 id="整形常量"><a href="#整形常量" class="headerlink" title="整形常量"></a>整形常量</h3><p>整形常量是整数类型的数据，它所表现的形式有以下几种类型。</p>
<blockquote>
<p>二进制:由数字0和1组成的数字序列，如: 00110101。</p>
<p>八进制:以开头并且其后由0 ~7范围(包括和7)内的整数组成的数字序列，如: 0342。</p>
<p>十进制:由数字0~9范围(包括o和9)内的整数组成的数字序列。如: 198。整数以十进制表示时，第一位不能是0，0本身除外。</p>
<p>十六进制:以0x或者ox开头并且其后由0—9、A—F(包括和9、A和F)组成的数字序列，如0x25AF。</p>
</blockquote>
<h3 id="浮点数常量"><a href="#浮点数常量" class="headerlink" title="浮点数常量"></a>浮点数常量</h3><blockquote>
<p>浮点数常量就是在数学中用到的小数，分为float单精度浮点数和double双精度浮点数两种类型。其中，单精度浮点数后面以F或f结尾，而双精度浮点数则以D或d结尾。当然，在使用浮点数时也可以在结尾处不加任何的后缀，此时虚拟机会默认为double双精度浮点数。浮点数常量还可以通过指数形式来表示。具体示例如下:2e3f   3.6d    0f    3.84d    5. 022e+23f4</p>
</blockquote>
<p>其中e表示倍数，而f是因为在浮点数常量中通过float赋值的情况下，一般默认浮点数的类型为double型，所以需要f来进行确定该值为float类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Market</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> a = <span class="number">1.2</span>; <span class="comment">//类型不匹配；不能从double转换为float</span></span><br><span class="line">		System.out.println(a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是Eclipse中得出结果，从上面可以看出，不写f的话1.2就会被判断为double型，所以需要在1.2后面加上f才能识别出float类型。</p>
<p>如果不加f的话也可以解决这个问题吗？可以的,可以使用强制类型转换去进行转换，但是如果数值太大的话则可能会导致数值丢失问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a = (<span class="keyword">float</span>) <span class="number">1.2</span>;<span class="comment">//强制类型转换</span></span><br></pre></td></tr></table></figure>

<p>当数值类型为double类型时，值后面的字母D和d可加可不加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">100.6</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">152.6</span>d;</span><br></pre></td></tr></table></figure>

<h3 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h3><blockquote>
<p font-family="仿宋">字符常量用于表示一个字符，一个字符常量要用一对英文半角格式的单引号(' ')引起来，它可以是英文字母、数字、标点符号、以及由转义序列来表示的特殊字符。具体示例如下:'a'    '1'    '&'     '\r  '    '\u0000' </p>

<p font-family="仿宋">上面的示例中，'\u0000'表示一个空白字符，即在单引号之间没有任何字符。之，所以能这样表示是因为，Java采用的是Unicode字符集,Unicode字符以\u开头，空白字符在Unicode码表中对应的值为'\u0000'。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a =<span class="string">'a'</span> </span><br><span class="line"><span class="keyword">char</span> b =<span class="string">'\u0000'</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>注意：字符串需要英文的括号和双引号，一个字符串可以包含一个字符或多个字符，也可以是不包含任何字符，即长度为零。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a)<span class="comment">//这个不是字符串哦</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>)<span class="comment">//这个才是(￣▽￣)</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h3><p>布尔常量在java中不像C++那样使用1和0去表示true或者false.它是直接以true和false的值去进行判断的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Market</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> a1 = <span class="keyword">false</span>;<span class="comment">//声明一个布尔类型，初始值为false</span></span><br><span class="line">        	a1 = <span class="keyword">true</span>;<span class="comment">//改变a1变量的值为ture</span></span><br><span class="line">		System.out.println(a1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后输出的结果是ture.</p>
<h3 id="null常量"><a href="#null常量" class="headerlink" title="null常量"></a>null常量</h3><p>null常量只有一个值null，表示对象的引用为空。</p>
<hr>
<p>好了，这节java学习笔记到此为止，基础语法部分不是很难，后面才是重点学习的内容，学习笔记2什么时候有空我就什么时候写。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习分享</tag>
      </tags>
  </entry>
  <entry>
    <title>公告</title>
    <url>/2020/04/27/notice/</url>
    <content><![CDATA[<p>博客正在开发中😎</p>
<p>更新日志</p>
]]></content>
  </entry>
  <entry>
    <title>第一篇博客的诞生</title>
    <url>/2020/04/25/next/</url>
    <content><![CDATA[<h1 id="国外热门下载器IDM快速上手"><a href="#国外热门下载器IDM快速上手" class="headerlink" title="国外热门下载器IDM快速上手"></a>国外热门下载器IDM快速上手</h1><p>这是本人的第一篇博客，望大家海涵，新手博主在线教学。</p>
<h3 id="首先，了解一下IDM。"><a href="#首先，了解一下IDM。" class="headerlink" title="首先，了解一下IDM。"></a>首先，了解一下IDM。</h3><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=56078837,1567002335&fm=26&gp=0.jpg%5D" alt></p>
<p>图片来源：<a href="https://chromecj.com/genuine/2019-05/2586.html" target="_blank" rel="noopener">https://chromecj.com/genuine/2019-05/2586.html</a></p>
<blockquote>
<p>IDM是一个使用多传输通道进行数据传输的数据传输工具，通俗来讲就是把一个文件分成多份同步进行数据传输，也就是下载，可以将你的网速发挥到很大.</p>
</blockquote>
<a id="more"></a>

<p>IDM不仅仅有着多传输通道的作用，还拥有着嗅探网页的功能，也就是说如果你想在一个网页上下载某个资源的时候IDM就会进行嗅探出这个资源的链接，然后进行传输下载到你的电脑上，通过我的试验，IDM在一般情况下确实可以通过你的网速来进行满速的下载，但这也仅仅只是在一般情况下适用。</p>
<p>在那些状况下不适用呢？国外的网站，通过某些条件的限制其他网友下载的网站等等.</p>
<p>那么，下面就开始我们的核心主题，快速上手IDM.</p>
<h3 id="下载一个IDM"><a href="#下载一个IDM" class="headerlink" title="下载一个IDM"></a>下载一个IDM</h3><p>蓝奏云:<a href="https://shengdetanxi.lanzous.com/ibwc9wb" target="_blank" rel="noopener">IDM下载</a>   密码:d5yz</p>
<p>官网下载:<a href="http://www.internetdownloadmanager.com/" target="_blank" rel="noopener">http://www.internetdownloadmanager.com/</a></p>
<p>虽然是破解版,但是请大家不要养成使用破解版的习惯.  如果是特殊原因或者是学生党可以理解,有钱的话还是推荐正版的使用.</p>
<p>(注意:这不是最新版的IDM,但是博主还是再用,还是不错的一个版本,当然各位博友也可以下载最新版的进行下载使用.)</p>
<h3 id="安装IDM"><a href="#安装IDM" class="headerlink" title="安装IDM"></a>安装IDM</h3><p>如何安装IDM压缩包里面的已经写得很清楚了.我就不重复说明了.</p>
<h3 id="如何配置IDM"><a href="#如何配置IDM" class="headerlink" title="如何配置IDM"></a>如何配置IDM</h3><p>先打开IDM中的选项</p>
<p><img src="/2020/04/25/next/A.png" alt="A"></p>
<p>在选项的常规中选择你所需要的浏览器,并且勾选”使用高级浏览器集成”,这时可以查看自己选着的浏览器是否有安装IDM插件.</p>
<p><img src="/2020/04/25/next/B.png" alt="B"></p>
<p>以谷歌浏览器为例检查自己的插件是否安装成功</p>
<p><img src="/2020/04/25/next/C.png" alt="C"></p>
<p>注意:如何没有发现IDM插件那就需要重新配置IDM的选项,还有如果浏览器有插件的情况下发现自己的插件突然变灰然后消失的情况下,重新勾选”使用高级浏览器集成”一项. 然后使用IDM目录里面的IDMGCCExt.crx拖到浏览器的扩展管理面板里面去.</p>
<h3 id="如何使用IDM进行下载"><a href="#如何使用IDM进行下载" class="headerlink" title="如何使用IDM进行下载"></a>如何使用IDM进行下载</h3><p>这里使用chrome浏览器进行演示说明</p>
<p><strong>在网页使用插件进行下载</strong></p>
<p>选择网页中的某个资源或者元素进行右键点击下载</p>
<p><img src="/2020/04/25/next/D.png" alt="D"></p>
<p>跳转到IDM的下载页面</p>
<p><img src="/2020/04/25/next/E.png" alt="E"></p>
<p>最后点击开始下载就会开始下载，然后保存在你的指定的路径里面。</p>
<p>以后指不定可以会写进阶的IDM下载教程也说不定。</p>
]]></content>
      <categories>
        <category>IDM</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据类型与基本结构语句学习笔记</title>
    <url>/2020/05/12/java2/</url>
    <content><![CDATA[<p><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/14e65d0e528b5e6bf55e40d77a18ba28e3de6447f23ce257b738f26d86370c8086cc1d297d89a2af88d45d83a089c264?pictype=scale&from=30113&version=3.3.3.3&uin=3523751065&fname=scenic-view-of-forest-during-night-time-1252869.jpg&size=750" alt></p>
<p>java数据类型与基本结构语句主要需要学到：变量、选择结构语句、循环结构语句。</p>
<a id="more"></a>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><blockquote>
<p>在程序运行期间，随时可能产生一些临时数据，应用程序会将这些数据保存在一些内存单元中，每个内存单元都用一个标识符。这些内存单元被称变量，定义标识符就是变量名，内存单元中存储的数据就是变量的值。<br>变量的定义是:用来命名一个数据的标示符 :  int year = 1949<br>int是数据类型，表示是整数，year是一个标识符，=是赋值操作符，1949是一个数字类型的值，；表示改行结束，year这个标识符就是一个变量，它代表1947这个值。</p>
</blockquote>
<p>假设对x、y进行变量的赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>,y;</span><br><span class="line">y = x+<span class="number">6</span>；</span><br></pre></td></tr></table></figure>

<p>定义x和y就相当于分配了两个内存单元，并且变量x获得了初始值0而变量y却没有获得初始值。之后程序首先将变量x的值取出，将之赋值在变量y中，使得变量x和y在内存中的状态发生变化，最后y的值为6。</p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p><strong>局部变量</strong>：局部变量，也称内部变量，是指在一个函数内部或复合语句内部定义的变量。局部变量的作用域是定义该变量的函数或定义该变量的复合语句。也就是说，局部变量只在定义它的函数或复合语句范围内有效，只能在定义它的函数或复合语句内才能使用它们。<br>也就是说其作用域仅限于函数内， 离开该函数后再使用这种变量是”非法”的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">f</span><span class="params">()</span></span>&#123; <span class="comment">//假设f在f类中</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">    b = a+<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">mian()&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量c和d在mian函数的作用域中才能使用，而变量a也只能在构造函数f的作用域中使用并且不能越过变量b去进行使用。</p>
<p><strong>类变量</strong>（静态变量）：在java中，类变量（也叫静态变量）是类中独立于方法之外的变量，用static 修饰。（static表示“全局的”、“静态的”，用来修饰成员变量和成员方法，或静态代码块（静态代码块独立于类成员，jvm加载类时会执行静态代码块，每个代码块只执行一次，按顺序执行））。</p>
<p>类变量的定义：(public等)访问修饰符 +static +数据类型 +变量名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tuition;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showTuition</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(tuition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>age是实例变量也称为对象变量，如果其中一个对象的值进行改变那么其他对象的值则不改变，而类变量(静态变量)则相反,类变量是所有对象共有的，所以其中一个对象将他进行改变，那么其他对象也会随之改变成类变量所改变后的值。</p>
<p><strong>成员变量</strong>（非静态变量）:在类体的变量部分中定义的变量，也称为属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> stuNumber; <span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">final</span> String sex=<span class="string">"男"</span>； <span class="comment">//常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中的实例变量、类变量、常量都属于成员变量。并且在方法的外部，直接写在类当中。作用范围是在整个类中，整个类都是可以通用。</p>
<h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><h3 id="整数类型变量"><a href="#整数类型变量" class="headerlink" title="整数类型变量"></a>整数类型变量</h3><p>用来存储整数数值，即没有小数部分的值。<br>整数类型分为4种不同的类型:字节型(byte) 、短整型(short) 、整型(int) 和长整型(long)。<br>占用空间指的是不同类型的变量分别占用的内存大小，取值范围是变量存储的值不能超出的范围。</p>
<table>
<thead>
<tr>
<th align="center">类型名</th>
<th align="center"><p align="center">占用空间</p></th>
<th align="center">取值范围</th>
<th align="center">取值范围（精确值）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center"><p align="center">8位(1字节)</p></td>
<td align="center">-2<sup>7</sup> ~ 2<sup>7</sup>-1</td>
<td align="center">-128 ~ 127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center"><p align="center">16位(2字节)</p></td>
<td align="center">-2<sup>15</sup> ~ 2<sup>15</sup>-1</td>
<td align="center">-32768 ~ 32767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center"><p align="center">32位(4字节)</p></td>
<td align="center">-2<sup>31</sup> ~ 2<sup>31</sup>-1</td>
<td align="center">-2147483648 ~ 2147483647</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center"><p align="center">64位(8字节)</p></td>
<td align="center">-2<sup>63</sup> ~ 2<sup>63</sup>-1</td>
<td align="center">-9223372036854776000 ~ 9223372036854775999</td>
</tr>
</tbody></table>
<p>为一个long类型的变量赋值时需要注意一点，所赋值的后面要加上个字母“L” (或小写“I”)，说明赋值为long类型。如果赋的值未超出int型的取值范围，则可以省略字母“L”(或小写“I”)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">2333333333333L</span>;	<span class="comment">//该值超出int类型的取值范围，所以必须写上L或者l</span></span><br><span class="line"><span class="keyword">long</span> b = <span class="number">189L</span>;			<span class="comment">//该值没有超出int类型的取值范围，所以L或者l可以加</span></span><br><span class="line"><span class="keyword">long</span> c = <span class="number">189</span>;			<span class="comment">//该值没有超出int类型的取值范围，所以L或者l可不加</span></span><br></pre></td></tr></table></figure>

<h3 id="浮点数类型变量"><a href="#浮点数类型变量" class="headerlink" title="浮点数类型变量"></a>浮点数类型变量</h3><p>浮点数类型变量用来存储小数数值。<br>浮点数类型分为两种:单精度浮点数(float) 、双精度浮点数(double)，double型所表示的浮点数比float型更精确。</p>
<table>
<thead>
<tr>
<th align="center">类型名</th>
<th align="center">占用空间</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">32位（4个字节）</td>
<td align="center">1.4E-45 ~ 3.4E+38,-3.4E+38 ~ -1.4E-45</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">64位（8个字节）</td>
<td align="center">4.9E-324 ~ 1.7E+308,-1.7E+308 ~ -4.9E-324</td>
</tr>
</tbody></table>
<p>在取值范围中，E表示以10为底的指数，E后面的“+”号和“—”号,代表正指数和负指数，例如1.4E-45表示1.4*10<sup>-45</sup>。</p>
<p>在为一个float类型的变量赋值时需要注意一 点，所赋值的后面一-定要加上字母“F” (或“f”)，而为double类型的变量赋值时，可以在所赋值的后面加上字符“D”(或“d”)，也可不加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">112.5f</span>; <span class="comment">//该变量为float类型，所以必须在后面加上F或者f</span></span><br><span class="line"><span class="keyword">double</span> b = <span class="number">112.5</span>d;<span class="comment">//该变量为double类型，所以后面D或者d可以加</span></span><br><span class="line"><span class="keyword">double</span> c = <span class="number">112.5</span>;<span class="comment">//该变量为double类型，所以后面D或者d可不加</span></span><br></pre></td></tr></table></figure>

<p>在程序中也可以为一个浮点数类型赋予一个整数数值。</p>
<h3 id="字符类型变量"><a href="#字符类型变量" class="headerlink" title="字符类型变量"></a>字符类型变量</h3><p font-family="仿宋">用于存储一个单一字符，在java中用char表示。
    <br>
每个char类型的字符变量都会占用2个字节。
    <br>
赋值时，要用英文半角格式的单引号('') 把字符括起来，如'a'。
    <br>
也可以赋值为0~65535范围内的整数，计算机会自动将这些整数转化为所对应的字符，如数值97对应的字符为'a'。</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">'a'</span>;<span class="comment">//为一个char类型的变量赋值字符a</span></span><br><span class="line"><span class="keyword">char</span> b = <span class="number">98</span>;<span class="comment">//为一个char类型的变量赋值整数，相当于赋值字符a</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔类型变量"><a href="#布尔类型变量" class="headerlink" title="布尔类型变量"></a>布尔类型变量</h3><p>布尔类型变量用来存储布尔值，在Java中 用boolean表示，该类型<br>的变量只有两个值，即true和false。 具体示例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> a = <span class="keyword">false</span>;<span class="comment">//声明一个boolean类型的变量，其初始值为false</span></span><br><span class="line">a = <span class="keyword">true</span>;	<span class="comment">//改变a变量的值为true</span></span><br></pre></td></tr></table></figure>

<h2 id="变量字面值"><a href="#变量字面值" class="headerlink" title="变量字面值"></a>变量字面值</h2><blockquote>
<p>创建一个Hero对象会用到new关键字,但是给一个基本类型变量赋值却不是用new.因为基本类型是Java语言里的一种内置的特殊数据类型,并环是某个类的对象。给基本类型的变量赋值的方式叫做字面值,如下所例:</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">float</span> hp = <span class="number">313f</span>;</span><br><span class="line">&gt;<span class="keyword">int</span> armor = <span class="number">24</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<h3 id="变量的类型转换"><a href="#变量的类型转换" class="headerlink" title="变量的类型转换"></a>变量的类型转换</h3><blockquote>
<p>当把一种数据类型的值赋给另一种数据类型的变量时，需要进行数据类型转换。<br>根据转换方式的不同，数据类型转换可分为两种:自动类型转换和强制类型转换。</p>
</blockquote>
<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><blockquote>
<p>也叫隐式类型转换，指的是两种数据类型在转换的过程中不需要显式地进行声明。</p>
<p>要实现自动类型转换，必须同时满足两个条件:</p>
<blockquote>
<p>第一是两种数据类型彼此兼容。</p>
</blockquote>
<blockquote>
<p>第二是目标类型的取值范围大于源类型的取值范围。</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">long</span> b  = a;<span class="comment">//程序把int类型的变量a转换成long类型的变量b，无须特殊声明，自动转换</span></span><br></pre></td></tr></table></figure>

<p><strong>1)</strong>整数类型之间可以实现转换，如byte类型的数据可以赋值给short、int、 long类 型的变量，short、 char类 型的数据可以赋值给int、long类型的变量，int类型的数据可以赋值给long类型的变量</p>
<p><strong>2)</strong>整数类型转换为float类型，如byte、 char、 short、 int类 型的数据可以赋值给float类型的变量。</p>
<p><strong>3)</strong>其它类型转换为double类型，如byte、 char、 short、 int、 long、float类型的数据可以赋值给double类型的变量。</p>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>强制类型转换也叫显式类型转换，指的是两种数据类型之间的转换需要进行显式地声明。</p>
<p>当两种类型彼此不兼容，或者目标类型取值范围小于源类型时，自动类型转换无法进行，这时就需要进行强制类型转换。</p>
<p>强制类型转换的格式如下所示:</p>
<p>目标类型 变量= (目标类型) 值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)a; <span class="comment">//int类型变量a强制转换成byte类型的b</span></span><br></pre></td></tr></table></figure>

<p>一般情况强制的类型转换能不用就不用，因为有时强转会导丢失精度问题，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)a;<span class="comment">//int类型变量a强制转换成byte类型的b,出现丢失精度</span></span><br></pre></td></tr></table></figure>

<p>因为byte类型的取值范围为-128 ~ 127,而int类型的取值范围为-2147483648 ~ 2147483647，所以当变量类型取值大的去对变量类型取值小的变量进行强制转换的时候其转换的数值只会取变量类型中取值小的对象中最大的取值范围，也就是说，上述强转中b的数值为byte类型的变量中取值范围的最大值，也就是b=127。</p>
<h3 id="低精度向高精度转换"><a href="#低精度向高精度转换" class="headerlink" title="低精度向高精度转换"></a>低精度向高精度转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> l = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p>l 是long类型的，其类型长度是64位、i 是int类型的，其类型长度是32位，所以l的精度，比i的精度要高<br>l = i;<br>把i的值赋给l， 首先l和i彼此的类型是不一样的，那么能否转换就取决于彼此的精度。<br>这个例子，是低精度向高精度转换是可以正常转换的，换句话说，int比较小，要放进比较大的long，随便怎么样，都放的进去</p>
<h3 id="高精度向低精度转换"><a href="#高精度向低精度转换" class="headerlink" title="高精度向低精度转换"></a>高精度向低精度转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">300</span>;</span><br><span class="line">b = i1;</span><br><span class="line">b = i2;</span><br></pre></td></tr></table></figure>

<p>b的类型是byte,其长度是8，最大只能放127<br>i1 的类型是int, 其长度是32,最大放2147483647，超过127<br>所以， 把int类型的数据转成为byte类型的数据，是有风险的<br>有的时候是可以转换的，比如 b = i1 (i1=10);<br>有的时候不可以转换 比如 b= i2 (i2=300) 因为放不下了，编译器就会提示错误。</p>
<blockquote>
<p>这个时候就只能采用强制转换，强制转换的意思就是，转是可以转的，但是不对转换之后的值负责。 风险自担，后果自负</p>
</blockquote>
<h3 id="学习小知识"><a href="#学习小知识" class="headerlink" title="学习小知识"></a>学习小知识</h3><p>虽然short和char都是16位的，长度是一样的，但是彼此之间，依然需要进行强制转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">80</span>;</span><br><span class="line">c = (<span class="keyword">char</span>) s;</span><br><span class="line">s = c;</span><br></pre></td></tr></table></figure>

<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><blockquote>
<p>变量需要在它的作用范围内才可以被使用，这个作用范围称为变量的作用域<br>在程序中，变量一定会被定义在某一对大括号中，该大括号所包含的代码区域便是这个变量的作用域。<br>假设1在大的作用域之中，2在小的作用域之中且在大的作用域的范围之内，那么小的作用域可以识别大的作用域1，而大的作用域却不能识别小的作用域2。</p>
</blockquote>
<p><img src="https://picabstract-preview-ftn.weiyun.com/ftn_pic_abs_v3/1a7521057a1202543f310eb3ed0f1b2c6dbd713a1854bfc6b7ee6d03bd4c9ef96a961b5269d8f84893de316206b72c06?pictype=scale&from=30113&version=3.3.3.3&uin=3523751065&fname=1.jpg&size=750" alt><br>上面代码中有有两层大括号，其中外层大括号所标识得代码区域就是变量y得作用域，内层大括号所标识的代码区域就是变量x的作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demol</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> s = <span class="number">4</span>;</span><br><span class="line">       &#123;</span><br><span class="line">       <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">       System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">       System.out.println(<span class="string">"s="</span>+s);</span><br><span class="line">       &#125;</span><br><span class="line">       y=s;<span class="comment">//出现编译错误，变量y无法被识别到</span></span><br><span class="line">       System.out.println(<span class="string">"s="</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中，通过eclipse编译运行中我们可以知道，外层变量的作用域中的变量y是无法识别内层变量的作用域中的变量y，所以出现编译错误，正确的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demol</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> s = <span class="number">4</span>;</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">      System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">      System.out.println(<span class="string">"s="</span>+s);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"s="</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去掉y=s;的一行代码，我们就发现在eclipse中编译运行是正确的，不仅如此，打印出来的结果是：y=10、s=4、s=4。</p>
<p>说明内层变量的作用域其实是可以使用外层变量的作用域中的变量的，而外层变量的作用域反之亦然。</p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符就是用来处理四则运算的符号，这是最简单、最常用的运算符号。</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center"><p align="center">正号</p></td>
<td align="center">+3</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center"><p align="center">负号</p></td>
<td align="center">b=4;-b;</td>
<td align="center">-4</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center"><p align="center">加</p></td>
<td align="center">5+5</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center"><p align="center">减</p></td>
<td align="center">6-4</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center"><p align="center">乘</p></td>
<td align="center">3*4</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center"><p align="center">除</p></td>
<td align="center">5/5</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center"><p align="center">取模(即算术中的求余数)</p></td>
<td align="center">7%5</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center"><p align="center">自增(前)</p></td>
<td align="center">a=2;b=++a;</td>
<td align="center">a=3;b=3;</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center"><p align="center">自增(后)</p></td>
<td align="center">a=2;b=a++;</td>
<td align="center">a=3;b=2;</td>
</tr>
<tr>
<td align="center">- -</td>
<td align="center"><p align="center">自减(前)</p></td>
<td align="center">a=2;b=- -a;</td>
<td align="center">a=1;b=1;</td>
</tr>
<tr>
<td align="center">- -</td>
<td align="center"><p align="center">自减(后)</p></td>
<td align="center">a=2;b=a- -;</td>
<td align="center">a=1;b=2;</td>
</tr>
</tbody></table>
<blockquote>
<p>算术运算符看上去比较简单，也很容易理解，但在实际使用时有很多需要</p>
<p>注意的问题，具体如下:</p>
<p><strong>1)</strong> 在进行自增(++) 和自减(- -) 的运算时，如果运算符放在操作数的前面则是先进行自增或自减运算，再进行其它运算。反之，如果运算符放在操作数的后面则是先进行其它运算再进行自增或自减运算。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> x = a + b++;</span><br><span class="line">System.out(<span class="string">"b="</span>+b);</span><br><span class="line">System.out(<span class="string">"x="</span>+x);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的代码块运行结果为：b=3、x=3，具体分析如下：<br>在上述代码中，定义了3个int类型的变量a、b、x。其中a=1、b=2。当进行“a+b++”运算时，由于运算符++写在了变量b的后面，属于先运算再自增，因此变量b在参与加法运算时其值仍然位2，而x 的值应为3。变量b在参与运算之后会进行自增，因此b的最终值为3。</p>
<p><strong>2)</strong>在进行除法运算时，当除数和被除数都为整数时，得到的结果也是一个整数。如果除法运算有小数参与，得到的结果会是一个小数。</p>
<p>例如，2510/1000属于整数之间相除，会忽略小数部分，得到的结果是2，而2.5/10的结果为0.25。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3500</span>/<span class="number">1000</span>*<span class="number">1000</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>结果为3000。由于表达式的执行顺序是从左到右，所以先执行除法运算3500/1000，得到结果为3，再乘以1000，得到的结果自然就是3000了。</p>
<p><strong>3)</strong> 在进行取模(%) 运算时，运算结果的正负取决于被模数(%左边的数)的符号，与模数(%右边的数)的符号无关。</p>
<p>如：(-5)%3=-2，而5%(-3)=2。</p>
</blockquote>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符的作用就是将常量、变量或表达式的值赋给某一个变量。</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center"><p align="center">赋值</p></td>
<td align="center">a=3;b=2;</td>
<td align="center">a=3;b=2;</td>
</tr>
<tr>
<td align="center">+=</td>
<td align="center"><p align="center">加等于</p></td>
<td align="center">a=3;b=2;a+=b;</td>
<td align="center">a=5;b=2;</td>
</tr>
<tr>
<td align="center">-=</td>
<td align="center"><p align="center">减等于</p></td>
<td align="center">a=3;b=2;a-=b;</td>
<td align="center">a=1;b=2;</td>
</tr>
<tr>
<td align="center">*=</td>
<td align="center"><p align="center">乘等于</p></td>
<td align="center">a=3;b=2;a*=b;</td>
<td align="center">a=6;b=2;</td>
</tr>
<tr>
<td align="center">/=</td>
<td align="center"><p align="center">除等于</p></td>
<td align="center">a=3;b=2;a/=b;</td>
<td align="center">a=1;b=2;</td>
</tr>
<tr>
<td align="center">%=</td>
<td align="center"><p align="center">模等于</p></td>
<td align="center">a=3;b=2;a%=b;</td>
<td align="center">a=1;b=2;</td>
</tr>
</tbody></table>
<blockquote>
<p>在赋值运算符的使用中，需要注意以下几个问题:</p>
<p><strong>1)</strong>在Java中可以通过一条赋值语句对多个变量进行赋值</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">int</span>.x, Y, z;</span><br><span class="line">&gt;X=Y=z =<span class="number">5</span>;<span class="comment">//为三个变量同时赋值5</span></span><br><span class="line">&gt;<span class="keyword">int</span> x=y=z=<span class="number">5</span>: <span class="comment">//这样写是错误的</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>2)</strong>除了“=”， 其它的都是特殊的赋值运算符，以“+=” 为例，x+=3就相当于x=x+3，首先会进行加法运算x+3，再将运算结果赋值给变量x。-=、*=、/=、%=赋值运算符都可依此类推。</p>
<p>在为变量赋值时,当两种类型彼此不兼容,或者目标类型取值范围小于源类型时,需要进行强制类型转换。例如：将一个int类型的值赋给一个short类型的变量，需要显式地进行强制类型转换。</p>
<p>然而在使用+=、-=、 *=、 /=、%=运算符进行赋值时,强制类型转换会自动完成,程序不需要做任何显式地声明。</p>
</blockquote>
<p><strong>赋值运算符中强制类型转换的自动实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">short</span> s =<span class="number">3</span>;</span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">       s +=i;</span><br><span class="line">       System.out.println(<span class="string">"s="</span>+s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第5行代码为赋值运算，虽然变脸s和i相加的运算结果为int类型，但通过运算符+=将结果赋值给short型的变量x时，java虚拟机会自动完成类型转换，从而得到s=8。</p>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><blockquote>
<p>比较运算符用于对两个数值或变量进行比较，其结果是一个布尔值，即true或false。</p>
<p>比较运算符在使用时需要注意一个问题，不能将比较运算符日“= =”误写，成赋值运算符“=”</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">相等于</td>
<td align="center">4==3</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
<td align="center">4!=3</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">4&lt;3</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">4&gt;3</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
<td align="center">4&lt;=3</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
<td align="center">4&gt;=3</td>
<td align="center">true</td>
</tr>
</tbody></table>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于对布尔型的数据进行操作，其结果仍是一个布尔型。</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center"><p align="center">与</p></td>
<td align="center">true&amp;true<br>true&amp;false<br>false&amp;false<br>false&amp;true</td>
<td align="center">true<br>false<br>false<br>false</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center"><p align="center">或</p></td>
<td align="center">true|true<br>true|false<br>false|false<br>false|true</td>
<td align="center">true<br>true<br>false<br>true</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center"><p align="center">异或</p></td>
<td align="center">true^true<br>true^false<br>false^false<br>false^true</td>
<td align="center">false<br>true<br>false<br>true</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center"><p align="center">非</p></td>
<td align="center">!true<br>!false</td>
<td align="center">false<br>true</td>
</tr>
<tr>
<td align="center">&amp;&amp;</td>
<td align="center"><p align="center">短路</p></td>
<td align="center">true&amp;&amp;true<br>true&amp;&amp;false<br>false&amp;&amp;false<br>false&amp;&amp;true</td>
<td align="center">true<br>false<br>false<br>false</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center"><p align="center">短路或</p></td>
<td align="center">true||true<br>true||false<br>false||false<br>false||true</td>
<td align="center">true<br>true<br>false<br>true</td>
</tr>
</tbody></table>
<blockquote>
<p>在使用逻辑运算符的过程中，需要注意以下几个细节:</p>
<p><strong>1)</strong>逻辑运算符可以针对结果为布尔值的表达式进行运算。如: x&gt;3 &amp;&amp;y!=0。</p>
<p><strong>2)</strong>运算符“&amp;”和“&amp;&amp;”都表示与操作，当且仅当运算符两边的操作数都为true时，其结果才为true,否则结果为false。当运算符“&amp;” 和”&amp;&amp;” 的右边为表达式时，两者在使用上还有一定的区别。在使用”&amp;” 进行运算时，不论左边为true或者false,右边的表达式都会进行运算。如果使用”&amp;&amp;” 进行运算，当左边为false时， 右边的表达式不会进行运算，因此“&amp;&amp;” 被称作短路与。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> statci <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = <span class="number">0</span>;<span class="comment">//定义变量x，初始值为0</span></span><br><span class="line">      <span class="keyword">int</span> y = <span class="number">0</span>;<span class="comment">//定义变量y，初始值为0</span></span><br><span class="line">      <span class="keyword">int</span> z = <span class="number">0</span>;<span class="comment">//定义变量z,初始值为0</span></span><br><span class="line">      <span class="keyword">boolean</span> a,b;<span class="comment">//定义boolean变量a和b</span></span><br><span class="line">      a= x &gt; <span class="number">0</span> &amp; y++ &gt; <span class="number">1</span>;</span><br><span class="line">      System.out.println(a);</span><br><span class="line">      System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">      b = x&gt; <span class="number">0</span> &amp;&amp; z++ &gt; <span class="number">1</span>;<span class="comment">//逻辑运算符&amp;&amp;对表达式进行运算</span></span><br><span class="line">      System.out.println(b);</span><br><span class="line">      System.out.println(<span class="string">"z="</span>+z);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中定义了3个整型变量x、y、z，初始值都为0，同时定义了两个布尔类型的变量a和b。代码中的第7行代码使用&amp;运算符对两个表达式进行运算，左边表达式x&gt;0的结果为false，这时无论右边表达式y++&gt;1的比较结果是什么，整个表达式x&gt;0&amp;y++&gt;1的结果都会是false。由于使用的是单个的运算符”&amp;”，运算符两边的表达式都会进行运算，因此变量y会进行自增。整个表达式运算结束时，y的值为1。代码中的第10行代码也是与运算，运算结果和第7行代码一样为false，区别在于在10行中使用短路与”&amp;&amp;”运算符，当左边为false时，右边的表达式不进行运算，因此变量z的值仍为0。</p>
</blockquote>
<p><strong>3)</strong> 运算符“I”和“II” 都表示或操作，当运算符两边的操作数任何一边的值为true时，其结果为true，当两边的值都为false时，其结果才为false.同与操作类似，“II” 表示短路或，当运算符“II” 的左边为true时，右边的表达式不会进行运算。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = x ==<span class="number">0</span> || y++&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>代码快执行完毕后，b的值为true，y的值仍为0。出现这样结果的原因是，运算符”||”的左边x==0结果为true，那么右边表达式将不会进行运算，y的值不发生任何变化。</p>
</blockquote>
<p><strong>4)</strong> 运算符“^”表示异或操作，当运算符两边的布尔值相同时(都为true或都为false)，其结果为false。当两边布尔值不相同时，其结果为true。</p>
</blockquote>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>在对一些比较复杂的表达式进行运算时，要明确表达式中所有运算符参与运算的先后顺序，把这种顺序称作运算符的优先级。</p>
<table>
<thead>
<tr>
<th align="center">优先级</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><p align="center">,   []   ()</p></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><p align="center">++   - -    ~    !  (数据类型)</p></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><p align="center">*   /   %</p></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><p align="center">+   -</p></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"><p align="center">&lt;&lt;   &gt;&gt;   &gt;&gt;&gt;</p></td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"><p align="center">&lt;   &gt;   &lt;=   &gt;=</p></td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><p align="center">==   !=</p></td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"><p align="center">&amp;</p></td>
</tr>
<tr>
<td align="center">9</td>
<td align="center"><p align="center">^</p></td>
</tr>
<tr>
<td align="center">10</td>
<td align="center"><p align="center">|</p></td>
</tr>
<tr>
<td align="center">11</td>
<td align="center"><p align="center">&amp;&amp;</p></td>
</tr>
<tr>
<td align="center">12</td>
<td align="center"><p align="center">||</p></td>
</tr>
<tr>
<td align="center">13</td>
<td align="center"><p align="center">?：</p></td>
</tr>
<tr>
<td align="center">14</td>
<td align="center"><p align="center">=   *=    /=    %=    +=    &lt;&lt;=    &gt;&gt;=    &gt;&gt;&gt;=    &amp;=    ^=    |=</p></td>
</tr>
</tbody></table>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a  = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b  = a +<span class="number">3</span>*a;</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p>运行结果为8，由于运算符”*”的优先级高于运算”+”，因此先运算3 * a，得到的结果是6，再将6与a相加，得到最后的结果8。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = (a+<span class="number">3</span>)*a;</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p>运算结果为10，由于运算”()”的优先级最高，因此先运算括号内的a+3,得到的结果是5，再将5与a相乘，得到最后的结果10。</p>
<p font-family="仿宋"><b>其实没必要取刻意记忆运算符的优先级。编写程序时，尽量使用括号"()"来实现想要的运算顺序，以免产生歧义。</b></p>
</blockquote>
<h2 id="表达式类型自动提升"><a href="#表达式类型自动提升" class="headerlink" title="表达式类型自动提升"></a>表达式类型自动提升</h2><p>表达式是指由变量和运算符组成的一个算式。Java 规定表达式中参与运算的变量类型至少是int型，如低于int型，则会被自动提升为int型。如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1= <span class="number">1</span>,b2 - <span class="number">2</span>,b3;</span><br><span class="line">b3=bl+b2;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<p>语句b3=b1+b2;在编译时出错，原因是: Java 系统会自动将b1+b2提升为int 型，此时赋值给byte类型变量b3会出错。</p>
<p><strong>正确的写法是:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b3= (<span class="keyword">byte</span>)(bl +b2);</span><br><span class="line">b3=bl+b2;</span><br></pre></td></tr></table></figure>

<h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ul>
<li>变量命名只能使用字母数字$_</li>
<li>量第一个字符只能使用姆$_</li>
<li>量第一个字符不能使用数字</li>
<li>注:_是下划线, 不是减号或者一破折号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a_12= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> $a43= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a434= <span class="number">5</span>;<span class="comment">//第一个是数字，是不行的.</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">34</span>a= <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<h1 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h1><h2 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h2><p>if条件语句分为三种语法格式，具体如下:</p>
<h3 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1) if语句"></a>1) if语句</h3><p>if语句是指如果满足某种条件，就进行某种处理，其语法格式如下所示: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件语句)&#123;</span><br><span class="line">代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述语法格式中，判断条件是一个布尔值，当值为true时，才会执行{}中的语句。</p>
<p><strong>范例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">       <span class="keyword">if</span>(x&lt;<span class="number">10</span>)&#123;</span><br><span class="line">           x++;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码，由于int类型的变量x=5,而if所判断的条件语句为x&lt;10，所以if判断为true，之后往下执行，得到x=6。</p>
<h3 id="2-if-else语句"><a href="#2-if-else语句" class="headerlink" title="2) if..else语句"></a>2) if..else语句</h3><p>f..else语句是指如果满足某种条件，就进行某种处理，否则就进行另一种处理，其语法格式如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件)&#123;</span><br><span class="line">执行语句<span class="number">1</span></span><br><span class="line">——</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">执行语句<span class="number">2</span></span><br><span class="line">——</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>范例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-if-else-if-else语句"><a href="#3-if-else-if-else语句" class="headerlink" title="3) if..else if..else语句"></a>3) if..else if..else语句</h3><p>if..else if ..else语句用于对多个条件进行判断，进行多种不同的处理，其语法格式如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件 <span class="number">1</span>) &#123;</span><br><span class="line">执行语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (判断条件<span class="number">2</span>) &#123;</span><br><span class="line">执行语句<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">。。。</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (判断条件n) &#123;</span><br><span class="line">执行语句n</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">执行语句n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>范例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习分享</tag>
      </tags>
  </entry>
  <entry>
    <title>java接口类和抽象题目实战</title>
    <url>/2020/05/01/java%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E9%A2%98%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p><img src="/2020/05/01/java%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E9%A2%98%E7%9B%AE%E5%AE%9E%E6%88%98/1.png" alt="1"></p>
<p>图片来源：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/</a></p>
<p>此文章只是我本人自己的学习经验，所以有错误的可以指出来。仅供参考和学习交流。</p>
<a id="more"></a>

<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote>
<p>1、定义形状接口，包含两个求形状的面积的方法getArea和求周长的方法getGirth，和一个常量PI=3.14159.</p>
<p>任务：</p>
<p>定义圆形类，实现形状接口。通过构造方法赋值，求半径为3.5的圆的面积和周长。</p>
<p>定义长方形类，实现形状接口。通过构造方法赋值，求长为5，高为6的矩形的面积和周长。</p>
<p>定义梯形类，实现形状接口。通过构造方法赋值，求上底为3.2，下底为4.8，高为2.2的梯形的面积。</p>
</blockquote>
<p>首先我们来看这个题目，非常形象的把接口，抽象，继承等几个概念给具体化出来。</p>
<p>在java中我们要用到面向对象的思想，所以，通过这几个对象来了解并做出相对框架是不难的，只要熟练掌握题目中所需要用到的关键字和函数的应用，就基本上一目了然，十分简单。</p>
<p>这个题我准备用两种方法去解决它。</p>
<h3 id="第一种解决方法"><a href="#第一种解决方法" class="headerlink" title="第一种解决方法"></a>第一种解决方法</h3><p>首先，需要包含求形状的面积方法，求形状的面积的方法getArea和求周长的方法getGirth，和一个常量PI=3.14159。</p>
<p> 通过上面的条件我们来创建一个接口，接口里面在创建2个方法getArea、getGirth和一个共有的静态常量PI(也就是在接口定义一个常量)。</p>
<h4 id="创建整体求形状方法的接口"><a href="#创建整体求形状方法的接口" class="headerlink" title="创建整体求形状方法的接口"></a>创建整体求形状方法的接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在接口中定义方法和常量PI"><a href="#在接口中定义方法和常量PI" class="headerlink" title="在接口中定义方法和常量PI"></a>在接口中定义方法和常量PI</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14159</span>;</span><br></pre></td></tr></table></figure>

<p>其中abstract public和public abstract通过这两个去定义方法都是不会报错的，我通过网上的资料得出，顺序不会影响方法的变换，详细和错误可以在下面评论区指出我一下。</p>
<p>定义常量中public final static 和 public static final 都表示共有的静态常量，但是一般推荐使用public static final来对常量进行表示，所以这个两个也是一样都可以运行不会报错，并且就算不加public static final直接使用属性去对对象进行赋值也是可以的。</p>
<p>public static final其中public表示的是公用的权限，static表示静态，而final表示该常量只能被赋值一次，不能改变。</p>
<h4 id="通过类对接口中的所有方法进行实现"><a href="#通过类对接口中的所有方法进行实现" class="headerlink" title="通过类对接口中的所有方法进行实现"></a>通过类对接口中的所有方法进行实现</h4><p>题目需要圆形、矩形和梯形并且需要构造方法进行赋值，所以创建图形的类去对接口进行实现，在类中定义构造方法然后进行赋值。</p>
<p>由于接口中的方法都是抽象方法，因此不能通过实例化对象的方式来调用接口中的方法，所以需要定义一个类然后由implements关键字实现接口中的所有方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circular</span> <span class="keyword">implements</span> <span class="title">shape</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p> 在circular类中创建构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> r ;	<span class="comment">//给r对象创建属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">circular</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123; <span class="comment">//创建构造方法</span></span><br><span class="line">	<span class="keyword">this</span>.r=r;	<span class="comment">//给r进行赋值操作	</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Area = PI*(r*r); <span class="comment">//在 getArea方法中创建圆形面积公式</span></span><br><span class="line">    <span class="keyword">return</span> Area; <span class="comment">//返回Area的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> Girth= <span class="number">2</span>*PI*r; <span class="comment">//在getGirth方法中创建圆形周长的公式</span></span><br><span class="line">    <span class="keyword">return</span> Girth; <span class="comment">//返回Girth的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最后在main方法中对方法进行引用和打印值"><a href="#最后在main方法中对方法进行引用和打印值" class="headerlink" title="最后在main方法中对方法进行引用和打印值"></a>最后在main方法中对方法进行引用和打印值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape_impl</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		circular getcircular = <span class="keyword">new</span> circular(<span class="number">3.5</span>); <span class="comment">//对circular类进行实例化</span></span><br><span class="line">        System.out.println(<span class="string">"圆形的面积为："</span>+getcircular.getArea());</span><br><span class="line">		System.out.println(<span class="string">"圆形的周长为："</span>+getcircular.getGirth());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有的人可能会说它不是抽象类的吗，所以不是不能被实例化吗？</p>
<p>首先circular类它只是通过implements来对接口的方法进行实现，所以它不是一个抽象类，可以进行实例化操作。</p>
<p>最后矩形和梯形的基本和上面中圆形使用的方法一样，所以就不做具体的说明了。</p>
<h4 id="下面是完整的代码"><a href="#下面是完整的代码" class="headerlink" title="下面是完整的代码"></a>下面是完整的代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shape_packet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI=<span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circular</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> r;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">circular</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Area = PI*(r*r);</span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Gieth = <span class="number">2</span>*PI*r;</span><br><span class="line">		<span class="keyword">return</span> Gieth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> logn,hight;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">rectangle</span><span class="params">(<span class="keyword">int</span> logn,<span class="keyword">int</span> hight)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.logn= logn;</span><br><span class="line">		<span class="keyword">this</span>.hight= hight;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> Area = logn*hight;</span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> Girth = (logn*<span class="number">2</span>)+(hight*<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> Girth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trapezoid</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> upper,land,height;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">trapezoid</span> <span class="params">(<span class="keyword">double</span> upper,<span class="keyword">double</span> land,<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.upper=upper;</span><br><span class="line">		<span class="keyword">this</span>.land=land;</span><br><span class="line">		<span class="keyword">this</span>.height=height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Area = (upper+land)*height/<span class="number">2</span>; </span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape_impl</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		circular getcircular = <span class="keyword">new</span> circular(<span class="number">3.5</span>);</span><br><span class="line">		rectangle getrectangle = <span class="keyword">new</span> rectangle(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">		trapezoid gettrapezoid = <span class="keyword">new</span> trapezoid(<span class="number">3.2</span>,<span class="number">4.8</span>,<span class="number">2.2</span>);</span><br><span class="line">		System.out.println(<span class="string">"圆形的面积为："</span>+getcircular.getArea());</span><br><span class="line">		System.out.println(<span class="string">"圆形的周长为："</span>+getcircular.getGirth());</span><br><span class="line">		System.out.println(<span class="string">"矩形的面积为："</span>+getrectangle.getArea());</span><br><span class="line">		System.out.println(<span class="string">"矩形的周长为："</span>+getrectangle.getGirth());</span><br><span class="line">		System.out.println(<span class="string">"梯形的面积为："</span>+gettrapezoid.getArea());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种解决方法"><a href="#第二种解决方法" class="headerlink" title="第二种解决方法"></a>第二种解决方法</h3><p>开始时是和第一种方法类似，只是把形状的类改为了抽象类的方法去进行解决。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">circular</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> r;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">circular</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Area = PI*(r*r);</span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Gieth = <span class="number">2</span>*PI*r;</span><br><span class="line">		<span class="keyword">return</span> Gieth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先这一步是通过抽象化这个类去实现的，和上面的方法不一样，上面没有进行抽象化类的概念。</p>
<h4 id="抽象类就不能去实例化对象"><a href="#抽象类就不能去实例化对象" class="headerlink" title="抽象类就不能去实例化对象"></a>抽象类就不能去实例化对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">circular getcircular = <span class="keyword">new</span> circular(<span class="number">3.5</span>);<span class="comment">//第二方法不能用这种方法去调用类中的构造方法</span></span><br></pre></td></tr></table></figure>

<p>抽象化以后，如果不能实例化去调用那么如何解决这个问题？那就是去继承抽象类在对继承的类进行功能的拓展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circular2</span> <span class="keyword">extends</span> <span class="title">circular</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承以后定义构造函数"><a href="#继承以后定义构造函数" class="headerlink" title="继承以后定义构造函数"></a>继承以后定义构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">circular2</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(r); <span class="comment">//访问抽象类的构造方法</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定义完以后对类的功能进行拓展"><a href="#定义完以后对类的功能进行拓展" class="headerlink" title="定义完以后对类的功能进行拓展"></a>定义完以后对类的功能进行拓展</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"圆的周长:"</span>+<span class="keyword">super</span>.getGirth()+<span class="string">"圆的面积："</span>+<span class="keyword">super</span>.getArea()+<span class="string">"圆的半径:"</span></span><br><span class="line">			+ <span class="keyword">super</span>.r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过void（空值）定义的函数名printA去对面积等数值进行打印</p>
<p>之后通过main方法去对circular2类进行实例化操作,然后引用printA对circular2类中的方法进行实现，并且打印数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape_impl</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		circular2 cir2 =<span class="keyword">new</span> circular2(<span class="number">3.5</span>);</span><br><span class="line">		cir2.printA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面基本都是一样的操作。</p>
<h4 id="下面是完整的代码-1"><a href="#下面是完整的代码-1" class="headerlink" title="下面是完整的代码"></a>下面是完整的代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shape_packet1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI=<span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">circular</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> r;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">circular</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Area = PI*(r*r);</span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Gieth = <span class="number">2</span>*PI*r;</span><br><span class="line">		<span class="keyword">return</span> Gieth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">circular2</span> <span class="keyword">extends</span> <span class="title">circular</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">circular2</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"圆的周长:"</span>+<span class="keyword">super</span>.getGirth()+<span class="string">"圆的面积："</span>+<span class="keyword">super</span>.getArea()+<span class="string">"圆的半径:"</span></span><br><span class="line">				+ <span class="keyword">super</span>.r);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> logn,hight;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">rectangle</span><span class="params">(<span class="keyword">int</span> logn,<span class="keyword">int</span> hight)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.logn= logn;</span><br><span class="line">		<span class="keyword">this</span>.hight= hight;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> Area = logn*hight;</span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> Girth = (logn*<span class="number">2</span>)+(hight*<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> Girth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rectangle2</span> <span class="keyword">extends</span> <span class="title">rectangle</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">rectangle2</span><span class="params">(<span class="keyword">int</span> logn, <span class="keyword">int</span> hight)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(logn, hight);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"矩形的面积："</span>+<span class="keyword">super</span>.getArea()+<span class="string">"矩形的周长："</span>+<span class="keyword">super</span>.getGirth());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">trapezoid</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> upper,land,height;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">trapezoid</span> <span class="params">(<span class="keyword">double</span> upper,<span class="keyword">double</span> land,<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.upper=upper;</span><br><span class="line">		<span class="keyword">this</span>.land=land;</span><br><span class="line">		<span class="keyword">this</span>.height=height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> Area = (upper+land)*height/<span class="number">2</span>; </span><br><span class="line">		<span class="keyword">return</span> Area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trapezoid2</span> <span class="keyword">extends</span> <span class="title">trapezoid</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">trapezoid2</span><span class="params">(<span class="keyword">double</span> upper, <span class="keyword">double</span> land, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(upper, land, height);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"梯形的面积："</span>+<span class="keyword">super</span>.getArea());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape_impl</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		circular2 cir2 =<span class="keyword">new</span> circular2(<span class="number">3.5</span>);</span><br><span class="line">		cir2.printA();</span><br><span class="line">		rectangle2 rec2 = <span class="keyword">new</span> rectangle2(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">		rec2.printB();</span><br><span class="line">		trapezoid2 tra2 = <span class="keyword">new</span> trapezoid2(<span class="number">3.2</span>,<span class="number">4.8</span>,<span class="number">2.2</span>);</span><br><span class="line">		tra2.printC();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>学习分享</tag>
        <tag>java实战</tag>
      </tags>
  </entry>
</search>
